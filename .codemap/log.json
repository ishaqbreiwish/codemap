[
  {
    "timestamp": "07/18/2025",
    "note": "testing config"
  },
  {
    "timestamp": "07/18/2025",
    "note": "diff --git a/Cargo.lock b/Cargo.lock\nindex 946f94f..05b133e 100644\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -219,8 +219,10 @@ dependencies = [\n  \"reqwest\",\n  \"rprompt\",\n  \"serde\",\n+ \"serde_derive\",\n  \"serde_json\",\n  \"similar\",\n+ \"toml\",\n  \"uuid\",\n ]\n \n@@ -1050,6 +1052,15 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"serde_spanned\"\n+version = \"0.6.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf41e0cfaf7226dca15e8197172c295a782857fcb97fad1808a166870dee75a3\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n [[package]]\n name = \"serde_urlencoded\"\n version = \"0.7.1\"\n@@ -1220,6 +1231,47 @@ dependencies = [\n  \"tokio\",\n ]\n \n+[[package]]\n+name = \"toml\"\n+version = \"0.8.23\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"dc1beb996b9d83529a9e75c17a1686767d148d70663143c7854d8b4a09ced362\"\n+dependencies = [\n+ \"serde\",\n+ \"serde_spanned\",\n+ \"toml_datetime\",\n+ \"toml_edit\",\n+]\n+\n+[[package]]\n+name = \"toml_datetime\"\n+version = \"0.6.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"22cddaf88f4fbc13c51aebbf5f8eceb5c7c5a9da2ac40a13519eb5b0a0e8f11c\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"toml_edit\"\n+version = \"0.22.27\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"41fe8c660ae4257887cf66394862d21dbca4a6ddd26f04a3560410406a2f819a\"\n+dependencies = [\n+ \"indexmap\",\n+ \"serde\",\n+ \"serde_spanned\",\n+ \"toml_datetime\",\n+ \"toml_write\",\n+ \"winnow\",\n+]\n+\n+[[package]]\n+name = \"toml_write\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5d99f8c9a7727884afe522e9bd5edbfc91a3312b36a77b5fb8926e4c31a41801\"\n+\n [[package]]\n name = \"tower-service\"\n version = \"0.3.3\"\n@@ -1609,6 +1661,15 @@ version = \"0.52.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n \n+[[package]]\n+name = \"winnow\"\n+version = \"0.7.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f3edebf492c8125044983378ecb5766203ad3b4c2f7a922bd7dd207f6d443e95\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"winreg\"\n version = \"0.50.0\"\ndiff --git a/Cargo.toml b/Cargo.toml\nindex dd69c5b..0e5eae5 100644\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -15,3 +15,4 @@ similar = \"2.2\"\n colored = \"2.0\"\n anyhow = \"1.0\"\n rprompt = \"2.2.0\"\n+toml = \"0.8\"\n\\ No newline at end of file\ndiff --git a/src/main.rs b/src/main.rs\nindex 8b67e76..8aed465 100644\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -10,13 +10,14 @@ summary_command = \\\"llama-cli summarize\\\"\\n\\n\\\n # Optional: Project tag for filtering later (future feature)\\n\\\n project_name = \\\"my-project\\\"\";\n \n-use anyhow::{Result};\n+use anyhow::{Result, anyhow};\n use clap::Parser;\n use serde::{Serialize, Deserialize};\n use std::fs;\n use std::path::Path;\n use std::io::Write; // for flushing stdout\n use std::fs::File;\n+use std::process::Command;\n use rprompt::prompt_reply;\n use chrono::Utc;\n use toml;\n@@ -38,6 +39,7 @@ struct LogEntry {\n }\n \n #[derive(Debug)]\n+#[derive(Deserialize)]\n struct Config {\n     default_note_count: Option<usize>,\n     timestamp_format: Option<String>,\n@@ -47,15 +49,16 @@ struct Config {\n }\n \n impl Config {\n-    fn load() -> Result<Config> => {\n+    fn load() -> Result<Config> {\n         let path = Path::new(\".codemap/\");\n         let config_path = path.join(\"config.toml\");\n \n         let content = match fs::read_to_string(&config_path) {\n             Ok(c) => c,\n-            Err(_) => eprintln!(\"Could not read file `{}`\", &config_path);\n-        }\n+            Err(_) => return Err(anyhow!(\".codemap/config.toml is missing\"))\n+        };\n \n+        Ok(toml::from_str(&content)?)\n     }\n }\n \n@@ -64,7 +67,11 @@ impl Config {\n #[command(rename_all = \"lowercase\")]\n enum Commands {\n     Init, // initializes remind me project\n-    Note {note: Option<String>,}, // adds a new note\n+    Add {\n+        note: Option<String>,\n+        #[arg(long)]\n+        auto: bool,\n+    },\n     Show {num: Option<i32>},\n     Summary,\n }\n@@ -134,6 +141,34 @@ fn add_note(note: &str) {\n     println!(\"Note added successfully.\");\n }\n \n+fn add_auto_note() -> Result<()> {\n+    // load in the config file\n+    let config = match Config::load() {\n+        Ok(cfg) => cfg,\n+        Err(e) => {\n+            eprintln!(\"⚠️ Failed to load config: {e}\");\n+            return Err(e); \n+        }\n+    };\n+\n+    // Run git diff HEAD\n+    let output = Command::new(\"git\")\n+        .arg(\"diff\")\n+        .arg(\"HEAD\")\n+        .output()?;\n+\n+    // pass the diff output into the stdin of the summary command\n+    let diff = String::from_utf8_lossy(&output.stdout);\n+    add_note(&diff);\n+\n+    Ok(())\n+}\n+\n+fn summary() {\n+    println!(\"Showing summary...\");\n+}\n+\n+\n fn show(num: i32) {\n     if num <= 0 {\n         eprintln!(\"Please provide a positive number of entries to show.\");\n@@ -157,22 +192,23 @@ fn show(num: i32) {\n     }\n }\n \n-fn summary() {\n-    println!(\"Showing summary...\");\n-}\n \n fn main() -> Result<()> {\n     let cli = Cli::parse();\n \n     match cli.command {\n         Commands::Init => init()?,\n-        Commands::Note { note } => {\n-            let final_note = match note {\n-                Some(n) if !n.trim().is_empty() => n,\n-                _ => prompt_reply(\"Write a note: \").unwrap(),\n-            };\n-            add_note(&final_note);\n-        }\n+        Commands::Add { note, auto } => {\n+            if auto {\n+                add_auto_note()?;\n+            } else {\n+                let final_note = match note {\n+                    Some(n) if !n.trim().is_empty() => n,\n+                    _ => prompt_reply(\"Write a note: \").unwrap(),\n+                };\n+                add_note(&final_note);\n+            }\n+        }        \n         Commands::Show { num } => {\n             let final_num = num.unwrap_or(3);\n             show(final_num)\n"
  },
  {
    "timestamp": "07/18/2025",
    "note": "diff --git a/Cargo.toml b/Cargo.toml\nindex dd69c5b..0e5eae5 100644\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -13,5 +13,6 @@ chrono = \"0.4\"\n reqwest = { version = \"0.11\", features = [\"json\", \"blocking\"] }\n similar = \"2.2\"\n colored = \"2.0\"\n anyhow = \"1.0\"\n rprompt = \"2.2.0\"\n+toml = \"0.8\"\n\\ No newline at end of file\ndiff --git a/src/main.rs b/src/main.rs\nindex 8b67e76..5cf49d7 100644\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -8,17 +8,18 @@ enable_summaries = true\\n\\n\\\n # Optional: Path to custom summary command (for local LLMs)\\n\\\n summary_command = \\\"llama-cli summarize\\\"\\n\\n\\\n # Optional: Project tag for filtering later (future feature)\\n\\\n project_name = \\\"my-project\\\"\";\n \n-use anyhow::{Result};\n+use anyhow::{Result, anyhow};\n use clap::Parser;\n use serde::{Serialize, Deserialize};\n use std::fs;\n use std::path::Path;\n use std::io::Write; // for flushing stdout\n use std::fs::File;\n+use std::process::Command;\n use rprompt::prompt_reply;\n use chrono::Utc;\n use toml;\n \n \n@@ -36,37 +37,43 @@ struct LogEntry {\n     timestamp: String,\n     note: String,\n }\n \n #[derive(Debug)]\n+#[derive(Deserialize)]\n struct Config {\n     default_note_count: Option<usize>,\n     timestamp_format: Option<String>,\n     enable_summaries: Option<bool>,\n     summary_command: Option<String>,\n     project_name: Option<String>,\n }\n \n impl Config {\n-    fn load() -> Result<Config> => {\n+    fn load() -> Result<Config> {\n         let path = Path::new(\".codemap/\");\n         let config_path = path.join(\"config.toml\");\n \n         let content = match fs::read_to_string(&config_path) {\n             Ok(c) => c,\n-            Err(_) => eprintln!(\"Could not read file `{}`\", &config_path);\n-        }\n+            Err(_) => return Err(anyhow!(\".codemap/config.toml is missing\"))\n+        };\n \n+        Ok(toml::from_str(&content)?)\n     }\n }\n \n \n #[derive(clap::Subcommand)]\n #[command(rename_all = \"lowercase\")]\n enum Commands {\n     Init, // initializes remind me project\n-    Note {note: Option<String>,}, // adds a new note\n+    Add {\n+        note: Option<String>,\n+        #[arg(long)]\n+        auto: bool,\n+    },\n     Show {num: Option<i32>},\n     Summary,\n }\n \n fn init() -> Result<()> {\n@@ -132,10 +139,41 @@ fn add_note(note: &str) {\n     fs::write(&log_path, json).expect(\"Failed to write log.\");\n \n     println!(\"Note added successfully.\");\n }\n \n+fn add_auto_note() -> Result<()> {\n+    // load in the config file\n+    let config = match Config::load() {\n+        Ok(cfg) => cfg,\n+        Err(e) => {\n+            eprintln!(\"⚠️ Failed to load config: {e}\");\n+            return Err(e); \n+        }\n+    };\n+\n+    // Run git diff HEAD\n+    let output = Command::new(\"git\")\n+        .args([\n+            \"diff\", \"--unified=5\",\n+            \"--ignore-blank-lines\", \"--ignore-space-at-eol\",\n+            \"HEAD\", \"--\", \"*.rs\", \"*.toml\", \":!Cargo.lock\"\n+        ])\n+        .output()?;\n+\n+    // pass the diff output into the stdin of the summary command\n+    let diff = String::from_utf8_lossy(&output.stdout);\n+    add_note(&diff);\n+\n+    Ok(())\n+}\n+\n+fn summary() {\n+    println!(\"Showing summary...\");\n+}\n+\n+\n fn show(num: i32) {\n     if num <= 0 {\n         eprintln!(\"Please provide a positive number of entries to show.\");\n         return;\n     }\n@@ -155,25 +193,26 @@ fn show(num: i32) {\n     for i in 0..count {\n         println!(\"{:?}: {:?}\", &log_json[i].timestamp, &log_json[i].note);\n     }\n }\n \n-fn summary() {\n-    println!(\"Showing summary...\");\n-}\n \n fn main() -> Result<()> {\n     let cli = Cli::parse();\n \n     match cli.command {\n         Commands::Init => init()?,\n-        Commands::Note { note } => {\n-            let final_note = match note {\n-                Some(n) if !n.trim().is_empty() => n,\n-                _ => prompt_reply(\"Write a note: \").unwrap(),\n-            };\n-            add_note(&final_note);\n+        Commands::Add { note, auto } => {\n+            if auto {\n+                add_auto_note()?;\n+            } else {\n+                let final_note = match note {\n+                    Some(n) if !n.trim().is_empty() => n,\n+                    _ => prompt_reply(\"Write a note: \").unwrap(),\n+                };\n+                add_note(&final_note);\n+            }\n         }        \n         Commands::Show { num } => {\n             let final_num = num.unwrap_or(3);\n             show(final_num)\n         }\n"
  }
]